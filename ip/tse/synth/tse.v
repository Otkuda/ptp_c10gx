// tse.v

// Generated using ACDS version 24.3 212

`timescale 1 ps / 1 ps
module tse (
		input  wire        clk,                // control_port_clock_connection.clk,               Clock Input
		input  wire        reset,              //              reset_connection.reset,             Reset Input
		input  wire        ref_clk,            //  pcs_ref_clk_clock_connection.clk,               Clock Input
		input  wire [4:0]  reg_addr,           //                  control_port.address
		output wire [15:0] reg_data_out,       //                              .readdata
		input  wire        reg_rd,             //                              .read
		input  wire [15:0] reg_data_in,        //                              .writedata
		input  wire        reg_wr,             //                              .write
		output wire        reg_busy,           //                              .waitrequest
		output wire        tx_clkena,          //       clock_enable_connection.tx_clkena
		output wire        rx_clkena,          //                              .rx_clkena
		output wire        gmii_rx_dv,         //               gmii_connection.gmii_rx_dv
		output wire [7:0]  gmii_rx_d,          //                              .gmii_rx_d
		output wire        gmii_rx_err,        //                              .gmii_rx_err
		input  wire        gmii_tx_en,         //                              .gmii_tx_en
		input  wire [7:0]  gmii_tx_d,          //                              .gmii_tx_d
		input  wire        gmii_tx_err,        //                              .gmii_tx_err
		output wire        mii_rx_dv,          //                mii_connection.mii_rx_dv
		output wire [3:0]  mii_rx_d,           //                              .mii_rx_d
		output wire        mii_rx_err,         //                              .mii_rx_err
		input  wire        mii_tx_en,          //                              .mii_tx_en
		input  wire [3:0]  mii_tx_d,           //                              .mii_tx_d
		input  wire        mii_tx_err,         //                              .mii_tx_err
		output wire        mii_col,            //                              .mii_col
		output wire        mii_crs,            //                              .mii_crs
		output wire        set_10,             //       sgmii_status_connection.set_10
		output wire        set_1000,           //                              .set_1000
		output wire        set_100,            //                              .set_100
		output wire        hd_ena,             //                              .hd_ena
		output wire        tx_clk,             // pcs_transmit_clock_connection.clk
		output wire        rx_clk,             //  pcs_receive_clock_connection.clk
		input  wire        reset_tx_clk,       // pcs_transmit_reset_connection.reset
		input  wire        reset_rx_clk,       //  pcs_receive_reset_connection.reset
		output wire        led_crs,            //         status_led_connection.crs
		output wire        led_link,           //                              .link
		output wire        led_panel_link,     //                              .panel_link
		output wire        led_col,            //                              .col
		output wire        led_an,             //                              .an
		output wire        led_char_err,       //                              .char_err
		output wire        led_disp_err,       //                              .disp_err
		input  wire [0:0]  tx_analogreset,     //                tx_analogreset.tx_analogreset
		input  wire [0:0]  tx_digitalreset,    //               tx_digitalreset.tx_digitalreset
		input  wire [0:0]  rx_analogreset,     //                rx_analogreset.rx_analogreset
		input  wire [0:0]  rx_digitalreset,    //               rx_digitalreset.rx_digitalreset
		output wire [0:0]  tx_cal_busy,        //                   tx_cal_busy.tx_cal_busy
		output wire [0:0]  rx_cal_busy,        //                   rx_cal_busy.rx_cal_busy
		input  wire [0:0]  tx_serial_clk,      //                 tx_serial_clk.clk
		input  wire        rx_cdr_refclk,      //                 rx_cdr_refclk.clk
		input  wire [0:0]  rx_set_locktodata,  //             rx_set_locktodata.rx_set_locktodata
		input  wire [0:0]  rx_set_locktoref,   //              rx_set_locktoref.rx_set_locktoref
		output wire [0:0]  rx_is_lockedtoref,  //             rx_is_lockedtoref.rx_is_lockedtoref
		output wire [0:0]  rx_is_lockedtodata, //            rx_is_lockedtodata.rx_is_lockedtodata
		input  wire        rxp,                //             serial_connection.rxp
		output wire        txp,                //                              .txp
		output wire        rx_recovclkout      //     serdes_control_connection.export
	);

	tse_altera_eth_tse_2240_3eoiboa eth_tse_0 (
		.clk                (clk),                //   input,   width = 1, control_port_clock_connection.clk
		.reset              (reset),              //   input,   width = 1,              reset_connection.reset
		.ref_clk            (ref_clk),            //   input,   width = 1,  pcs_ref_clk_clock_connection.clk
		.reg_addr           (reg_addr),           //   input,   width = 5,                  control_port.address
		.reg_data_out       (reg_data_out),       //  output,  width = 16,                              .readdata
		.reg_rd             (reg_rd),             //   input,   width = 1,                              .read
		.reg_data_in        (reg_data_in),        //   input,  width = 16,                              .writedata
		.reg_wr             (reg_wr),             //   input,   width = 1,                              .write
		.reg_busy           (reg_busy),           //  output,   width = 1,                              .waitrequest
		.tx_clkena          (tx_clkena),          //  output,   width = 1,       clock_enable_connection.tx_clkena
		.rx_clkena          (rx_clkena),          //  output,   width = 1,                              .rx_clkena
		.gmii_rx_dv         (gmii_rx_dv),         //  output,   width = 1,               gmii_connection.gmii_rx_dv
		.gmii_rx_d          (gmii_rx_d),          //  output,   width = 8,                              .gmii_rx_d
		.gmii_rx_err        (gmii_rx_err),        //  output,   width = 1,                              .gmii_rx_err
		.gmii_tx_en         (gmii_tx_en),         //   input,   width = 1,                              .gmii_tx_en
		.gmii_tx_d          (gmii_tx_d),          //   input,   width = 8,                              .gmii_tx_d
		.gmii_tx_err        (gmii_tx_err),        //   input,   width = 1,                              .gmii_tx_err
		.mii_rx_dv          (mii_rx_dv),          //  output,   width = 1,                mii_connection.mii_rx_dv
		.mii_rx_d           (mii_rx_d),           //  output,   width = 4,                              .mii_rx_d
		.mii_rx_err         (mii_rx_err),         //  output,   width = 1,                              .mii_rx_err
		.mii_tx_en          (mii_tx_en),          //   input,   width = 1,                              .mii_tx_en
		.mii_tx_d           (mii_tx_d),           //   input,   width = 4,                              .mii_tx_d
		.mii_tx_err         (mii_tx_err),         //   input,   width = 1,                              .mii_tx_err
		.mii_col            (mii_col),            //  output,   width = 1,                              .mii_col
		.mii_crs            (mii_crs),            //  output,   width = 1,                              .mii_crs
		.set_10             (set_10),             //  output,   width = 1,       sgmii_status_connection.set_10
		.set_1000           (set_1000),           //  output,   width = 1,                              .set_1000
		.set_100            (set_100),            //  output,   width = 1,                              .set_100
		.hd_ena             (hd_ena),             //  output,   width = 1,                              .hd_ena
		.tx_clk             (tx_clk),             //  output,   width = 1, pcs_transmit_clock_connection.clk
		.rx_clk             (rx_clk),             //  output,   width = 1,  pcs_receive_clock_connection.clk
		.reset_tx_clk       (reset_tx_clk),       //   input,   width = 1, pcs_transmit_reset_connection.reset
		.reset_rx_clk       (reset_rx_clk),       //   input,   width = 1,  pcs_receive_reset_connection.reset
		.led_crs            (led_crs),            //  output,   width = 1,         status_led_connection.crs
		.led_link           (led_link),           //  output,   width = 1,                              .link
		.led_panel_link     (led_panel_link),     //  output,   width = 1,                              .panel_link
		.led_col            (led_col),            //  output,   width = 1,                              .col
		.led_an             (led_an),             //  output,   width = 1,                              .an
		.led_char_err       (led_char_err),       //  output,   width = 1,                              .char_err
		.led_disp_err       (led_disp_err),       //  output,   width = 1,                              .disp_err
		.tx_analogreset     (tx_analogreset),     //   input,   width = 1,                tx_analogreset.tx_analogreset
		.tx_digitalreset    (tx_digitalreset),    //   input,   width = 1,               tx_digitalreset.tx_digitalreset
		.rx_analogreset     (rx_analogreset),     //   input,   width = 1,                rx_analogreset.rx_analogreset
		.rx_digitalreset    (rx_digitalreset),    //   input,   width = 1,               rx_digitalreset.rx_digitalreset
		.tx_cal_busy        (tx_cal_busy),        //  output,   width = 1,                   tx_cal_busy.tx_cal_busy
		.rx_cal_busy        (rx_cal_busy),        //  output,   width = 1,                   rx_cal_busy.rx_cal_busy
		.tx_serial_clk      (tx_serial_clk),      //   input,   width = 1,                 tx_serial_clk.clk
		.rx_cdr_refclk      (rx_cdr_refclk),      //   input,   width = 1,                 rx_cdr_refclk.clk
		.rx_set_locktodata  (rx_set_locktodata),  //   input,   width = 1,             rx_set_locktodata.rx_set_locktodata
		.rx_set_locktoref   (rx_set_locktoref),   //   input,   width = 1,              rx_set_locktoref.rx_set_locktoref
		.rx_is_lockedtoref  (rx_is_lockedtoref),  //  output,   width = 1,             rx_is_lockedtoref.rx_is_lockedtoref
		.rx_is_lockedtodata (rx_is_lockedtodata), //  output,   width = 1,            rx_is_lockedtodata.rx_is_lockedtodata
		.rxp                (rxp),                //   input,   width = 1,             serial_connection.rxp
		.txp                (txp),                //  output,   width = 1,                              .txp
		.rx_recovclkout     (rx_recovclkout)      //  output,   width = 1,     serdes_control_connection.export
	);

endmodule
